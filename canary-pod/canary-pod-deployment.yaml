apiVersion: apps/v1
kind: Deployment
metadata:
  name: canary-pod
  namespace: openshift-ingress
spec:
  minReadySeconds: 30
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: canary-pod
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: canary-pod
    spec:
      containers:
      - env:
        - name: NGXINX_PORT
          value: "8888"
        - name: TEST_ROUTE
          value: "canary-openshift-ingress-canary.apps.shrocp4upi413ovn.lab.psi.pnq2.redhat.com"
        - name: READY_URI
          value: "/healthz/ready"
        image: "quay.io/rhn_support_wrussell/canary-pod:latest"
        imagePullPolicy: Always
        livenessProbe: #set to check a file exists
          exec:
            command:
            - cat
            - /tmp/healthy
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: canary-pod
        ports:
        - containerPort: 8888
          hostPort: 8888
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          exec:
            command:
            - cat
            - /tmp/healthy
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: true
        startupProbe:
          failureThreshold: 120
          exec:
            command:
            - cat
            - /tmp/healthy
          initialDelaySeconds: 10
          periodSeconds: 1
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
        node-role.kubernetes.io/worker: ""
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 60
      serviceAccount: router
      serviceAccountName: router